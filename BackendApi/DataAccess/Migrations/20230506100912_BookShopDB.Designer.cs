// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(BookShopContext))]
    [Migration("20230506100912_BookShopDB")]
    partial class BookShopDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Models.Attribute", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.HasKey("Name")
                        .HasName("PK__Attribut__737584F7B7F801E8");

                    b.ToTable("Attribute", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Book", b =>
                {
                    b.Property<int>("Isbn")
                        .HasColumnType("int")
                        .HasColumnName("ISBN");

                    b.Property<int>("AmountInStock")
                        .HasColumnType("int")
                        .HasColumnName("Amount_in_stock");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("PublishingHouse")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Publishing_house");

                    b.Property<int>("YearOfPublishing")
                        .HasColumnType("int")
                        .HasColumnName("Year_of_publishing");

                    b.HasKey("Isbn")
                        .HasName("PK__Book__447D36EBAF1130BD");

                    b.HasIndex("Category");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("Domain.Models.BookProperty", b =>
                {
                    b.Property<int>("Isbn")
                        .HasColumnType("int")
                        .HasColumnName("ISBN");

                    b.Property<string>("Attribute")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<object>("Value")
                        .IsRequired()
                        .HasColumnType("sql_variant");

                    b.HasKey("Isbn", "Attribute")
                        .HasName("PK__Book_pro__7BF95C7095C754B0");

                    b.HasIndex("Attribute");

                    b.ToTable("Book_property", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CustomerLogin")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Customer_login");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CustomerLogin");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("Domain.Models.CartItem", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("Cart_id");

                    b.Property<int>("Isbn")
                        .HasColumnType("int")
                        .HasColumnName("ISBN");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.HasKey("CartId", "Isbn")
                        .HasName("PK__Cart_ite__72C1FCAF6CCEC9DA");

                    b.HasIndex("Isbn");

                    b.ToTable("Cart_item", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.HasKey("Name")
                        .HasName("PK__Category__737584F7CB1D4698");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Domain.Models.CategoryAttribute", b =>
                {
                    b.Property<string>("Category")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Attribute")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.HasKey("Category", "Attribute")
                        .HasName("PK__Category__743356A85D5E6B2E");

                    b.HasIndex("Attribute");

                    b.ToTable("Category_attribute", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customer", b =>
                {
                    b.Property<string>("Login")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("First_name");

                    b.Property<int?>("Flat")
                        .HasColumnType("int");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<int?>("House")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Last_name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Middle_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("Phone_number")
                        .IsFixedLength();

                    b.Property<string>("Region")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Street")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ZipCode")
                        .HasColumnType("int")
                        .HasColumnName("Zip_code");

                    b.HasKey("Login")
                        .HasName("PK__Customer__5E55825A8DC76854");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("Domain.Models.OrderDetail", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("Cart_id");

                    b.Property<DateTime?>("CompletionTime")
                        .HasColumnType("datetime")
                        .HasColumnName("Completion_time");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeliveryCity")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Delivery_city");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("date")
                        .HasColumnName("Delivery_date");

                    b.Property<int?>("DeliveryFlat")
                        .HasColumnType("int")
                        .HasColumnName("Delivery_flat");

                    b.Property<int?>("DeliveryHouse")
                        .HasColumnType("int")
                        .HasColumnName("Delivery_house");

                    b.Property<decimal?>("DeliveryPrice")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("Delivery_price");

                    b.Property<string>("DeliveryRegion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Delivery_region");

                    b.Property<string>("DeliveryStreet")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Delivery_street");

                    b.Property<int?>("DeliveryZipCode")
                        .HasColumnType("int")
                        .HasColumnName("Delivery_zip_code");

                    b.Property<bool>("Payed")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Payment_type");

                    b.Property<bool>("Pickup")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationTime")
                        .HasColumnType("datetime")
                        .HasColumnName("Registration_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("CartId")
                        .HasName("PK__Order_de__D6862FC1EF0FF920");

                    b.ToTable("Order_details", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Book", b =>
                {
                    b.HasOne("Domain.Models.Category", "CategoryNavigation")
                        .WithMany("Books")
                        .HasForeignKey("Category")
                        .IsRequired()
                        .HasConstraintName("FK__Book__Category__2E1BDC42");

                    b.Navigation("CategoryNavigation");
                });

            modelBuilder.Entity("Domain.Models.BookProperty", b =>
                {
                    b.HasOne("Domain.Models.Attribute", "AttributeNavigation")
                        .WithMany("BookProperties")
                        .HasForeignKey("Attribute")
                        .IsRequired()
                        .HasConstraintName("FK__Book_prop__Attri__37A5467C");

                    b.HasOne("Domain.Models.Book", "IsbnNavigation")
                        .WithMany("BookProperties")
                        .HasForeignKey("Isbn")
                        .IsRequired()
                        .HasConstraintName("FK__Book_prope__ISBN__36B12243");

                    b.Navigation("AttributeNavigation");

                    b.Navigation("IsbnNavigation");
                });

            modelBuilder.Entity("Domain.Models.Cart", b =>
                {
                    b.HasOne("Domain.Models.Customer", "CustomerLoginNavigation")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerLogin")
                        .IsRequired()
                        .HasConstraintName("FK__Cart__Customer_l__3B75D760");

                    b.Navigation("CustomerLoginNavigation");
                });

            modelBuilder.Entity("Domain.Models.CartItem", b =>
                {
                    b.HasOne("Domain.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .IsRequired()
                        .HasConstraintName("FK__Cart_item__Cart___3F466844");

                    b.HasOne("Domain.Models.Book", "IsbnNavigation")
                        .WithMany("CartItems")
                        .HasForeignKey("Isbn")
                        .IsRequired()
                        .HasConstraintName("FK__Cart_item__ISBN__403A8C7D");

                    b.Navigation("Cart");

                    b.Navigation("IsbnNavigation");
                });

            modelBuilder.Entity("Domain.Models.CategoryAttribute", b =>
                {
                    b.HasOne("Domain.Models.Attribute", "AttributeNavigation")
                        .WithMany("CategoryAttributes")
                        .HasForeignKey("Attribute")
                        .IsRequired()
                        .HasConstraintName("FK__Category___Attri__32E0915F");

                    b.HasOne("Domain.Models.Category", "CategoryNavigation")
                        .WithMany("CategoryAttributes")
                        .HasForeignKey("Category")
                        .IsRequired()
                        .HasConstraintName("FK__Category___Categ__31EC6D26");

                    b.Navigation("AttributeNavigation");

                    b.Navigation("CategoryNavigation");
                });

            modelBuilder.Entity("Domain.Models.OrderDetail", b =>
                {
                    b.HasOne("Domain.Models.Cart", "Cart")
                        .WithOne("OrderDetail")
                        .HasForeignKey("Domain.Models.OrderDetail", "CartId")
                        .IsRequired()
                        .HasConstraintName("FK__Order_det__Cart___440B1D61");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("Domain.Models.Attribute", b =>
                {
                    b.Navigation("BookProperties");

                    b.Navigation("CategoryAttributes");
                });

            modelBuilder.Entity("Domain.Models.Book", b =>
                {
                    b.Navigation("BookProperties");

                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Domain.Models.Cart", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("CategoryAttributes");
                });

            modelBuilder.Entity("Domain.Models.Customer", b =>
                {
                    b.Navigation("Carts");
                });
#pragma warning restore 612, 618
        }
    }
}
